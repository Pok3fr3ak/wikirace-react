[{"C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\index.tsx":"1","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\reportWebVitals.ts":"2","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\App.tsx":"3","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\main.tsx":"4","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\menu.tsx":"5","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\lobby.tsx":"6","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\game.tsx":"7","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\socket.tsx":"8","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\test.tsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":420,"mtime":1611606957011,"results":"13","hashOfConfig":"11"},{"size":1416,"mtime":1618218804692,"results":"14","hashOfConfig":"11"},{"size":3079,"mtime":1618218170496,"results":"15","hashOfConfig":"11"},{"size":1729,"mtime":1618251188519,"results":"16","hashOfConfig":"11"},{"size":4658,"mtime":1618254354752,"results":"17","hashOfConfig":"11"},{"size":209,"mtime":1618213581268,"results":"18","hashOfConfig":"11"},{"size":127,"mtime":1618218759798,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"nbrcfc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\index.tsx",[],["43","44"],"C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\reportWebVitals.ts",[],"C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\App.tsx",[],"C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\main.tsx",["45","46"],"import { createContext, useContext, useEffect, useState } from 'react';\r\nimport Menu from './components/menu';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Game from './components/game';\r\nimport { SocketContext } from './components/socket';\r\nimport { Training } from './components/test';\r\n\r\nexport const LobbyContext = createContext({\r\n    lobbyID: 0,\r\n    setLobbyID: (num: number) => { }\r\n});\r\n\r\nexport const UsernameContext = createContext({\r\n    username: 'TestPlayer',\r\n    setUsername: (str: string) => { },\r\n})\r\n\r\nexport default function Main() {\r\n\r\n    const io = useContext(SocketContext);\r\n\r\n    const [lobbyID, setLobbyID] = useState(0);\r\n    const [username, setUsername] = useState('TestPlayer');\r\n\r\n    const lobbyVal = { lobbyID, setLobbyID }\r\n    const usernameVal = { username, setUsername };\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <main>\r\n            <LobbyContext.Provider value={lobbyVal}>\r\n                <UsernameContext.Provider value={usernameVal}>\r\n                    <Router>\r\n                        <Route exact path=\"/\" component={Menu} />\r\n                        <Route path=\"/lobby/:id?\" component={Game} />\r\n                        <Route path=\"/testing\" component={Training} />\r\n                    </Router>\r\n                </UsernameContext.Provider>\r\n            </LobbyContext.Provider>\r\n        </main>\r\n    )\r\n}","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\menu.tsx",["47","48","49","50","51"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Link, Route, Router } from 'react-router-dom';\r\nimport { LobbyContext, UsernameContext } from '../main';\r\nimport { SocketContext } from './socket';\r\n\r\n\r\nenum menuState {\r\n    start, addUsername\r\n}\r\n\r\nexport default function Menu(props: any) {\r\n\r\n    const socket = useContext(SocketContext);\r\n\r\n    const [menuState, setMenuState] = useState(0);\r\n    const [friendsState, setFriendsState] = useState(0);\r\n    const [lobbyInput, setLobbyInput] = useState('');\r\n\r\n    const io = useContext(SocketContext);\r\n    const { lobbyID, setLobbyID } = useContext(LobbyContext);\r\n    const { username, setUsername } = useContext(UsernameContext);\r\n\r\n    useEffect(() => {\r\n        io.on('lobbyID', (data: any) => {\r\n            console.log(data);\r\n\r\n            setLobbyID(data);\r\n            props.history.push(`/lobby/${data}`)\r\n        })\r\n\r\n        return () => {\r\n            io.off('lobbyID');\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Menu\">\r\n            { menuState === 1 ?\r\n                <div>\r\n                    <button onClick={() => setMenuState(0)}>BACK</button>\r\n                    <button onClick={() => setFriendsState(1)}>\r\n                        Lobby erstellen\r\n                    </button>\r\n                    <button onClick={() => setFriendsState(2)}>\r\n                        Einer bestehenden Lobby joinen\r\n                    </button>\r\n                    {\r\n                        friendsState === 1 || friendsState === 2 ?\r\n                            <div>\r\n                                <label htmlFor=\"username\">Username: </label>\r\n                                <input onChange={event => setUsername(event.target.value)} type=\"text\" name=\"username\" id=\"username\" required />\r\n                                {\r\n                                    friendsState === 1 ?\r\n                                        <div>\r\n                                            <button id=\"confirmUsername\" onClick={() => {\r\n                                                socket.emit('requestLobby', username);\r\n                                            }}>Les Play</button>\r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                            <input onChange={event => setLobbyInput(event.target.value)} type=\"text\" name=\"username\" id=\"username\" required />\r\n                                            <Link to={`/lobby/${lobbyInput}`}>Go To Lobby Scree</Link>\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                            :\r\n                            <div></div>\r\n                    }\r\n\r\n                </div>\r\n                :\r\n                <div>\r\n                    <button>Training</button>\r\n                    <button onClick={() => setMenuState(1)}>Spiel doch mit Freunden</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\lobby.tsx",["52","53"],"import { useContext, useEffect, useState } from 'react';\r\nimport { UsernameContext } from '../main';\r\nimport { SocketContext } from './socket';\r\n\r\nexport default function Lobby(props: any) {\r\n    \r\n    const id: string = props.id;\r\n\r\n    console.log(props);\r\n    \r\n\r\n    const [playerState, setPlayerState] = useState<Array<String>>();\r\n    const [ready, setReady] = useState(false);\r\n\r\n    const {username, setUsername} = useContext(UsernameContext);\r\n    const io = useContext(SocketContext);\r\n\r\n    useEffect(() => {\r\n        io.emit('checkLobbyID', id);\r\n        io.emit('lobbyInfo', { id, username })\r\n\r\n        io.on('checkedLobbyID', (data: boolean) => {\r\n            if (data === false) {\r\n                props.props.history.push('/');\r\n            }\r\n        })\r\n\r\n        io.on('usernames', (data: any) => {\r\n            setPlayerState(data);\r\n        })\r\n\r\n        return () => {\r\n            io.off('checkedLobbyID');\r\n            io.off('usernames');\r\n        }\r\n    }, [])\r\n\r\n    console.log(id, props);\r\n\r\n    const playerList = playerState?.map((x, i) => {\r\n        console.log(x);\r\n\r\n        return <li key={i}>{x}</li>\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <p className=\"lobbyCode\">The Lobby Code is {id ? <span className=\"lobbyID\">{id}</span> : \"Nothing Here\"}</p>\r\n            </div>\r\n            <h2>Players in Lobby:</h2>\r\n            <ul>\r\n                {playerList}\r\n            </ul>\r\n            <button\r\n            onClick={()=>{\r\n                setReady(true);\r\n                io.emit('ready', id);\r\n            }}\r\n            disabled={ready === true ? true : false}\r\n            >\r\n                Ready\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\game.tsx",["54","55"],"import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport Lobby from \"./lobby\";\r\nimport { SocketContext } from \"./socket\";\r\n\r\ninterface RouteEntry {\r\n    pageid: number,\r\n    title: string,\r\n}\r\n\r\ninterface WikiMediaParserOutput {\r\n    title: string,\r\n    [key: string]: any\r\n}\r\n\r\ninterface GameInfo {\r\n    article: [{\r\n        id: number;\r\n        ns: number;\r\n        title: string;\r\n        [key: string]: any;\r\n    }],\r\n    data: {\r\n        parse: {\r\n            pageid: number;\r\n            text: string;\r\n            title: string;\r\n            [key: string]: any;\r\n        }\r\n    }\r\n}\r\n\r\nexport default function Game(props: any) {\r\n\r\n    const lobbyid: string = props.match.params.id;\r\n    const training = props.training;\r\n\r\n    const [wikipediaContent, setWikipediaContent] = useState('');\r\n    const [route, setRoute] = useState<Array<RouteEntry>>([]);\r\n    const [goal, setGoal] = useState<WikiMediaParserOutput>();\r\n\r\n    const entryPoint = useRef<HTMLDivElement>(null);\r\n\r\n    const io = useContext(SocketContext);\r\n\r\n    useEffect(() => {\r\n        if (entryPoint && entryPoint.current) {\r\n            entryPoint.current.querySelectorAll('div#wikipediaEntry a').forEach(x => {\r\n                x.addEventListener('click', (ev: any) => {\r\n                    ev.preventDefault();\r\n                    let rawLink: string;\r\n                    if (ev.target.nodeName === 'A') {\r\n                        rawLink = ev.target.attributes[\"href\"].value;\r\n                    } else {\r\n                        rawLink = ev.path[1].attributes[\"href\"].value\r\n                    }\r\n                    if (rawLink) {\r\n                        getSite(extractLink(rawLink)).then(data => parse(data));\r\n                    }\r\n\r\n                })\r\n            });\r\n        }\r\n\r\n    }, [wikipediaContent])\r\n\r\n\r\n    useEffect(() => {\r\n        io.on('gameInfo', (data: GameInfo) => {\r\n            console.log(data);\r\n            parse(data.data);\r\n        })\r\n    })\r\n\r\n    async function getSite(pageName: string) {\r\n        let step = decodeURIComponent(pageName);\r\n        let page = encodeURI(step);\r\n        let data = await fetch(`https://de.wikipedia.org/w/api.php?action=parse&format=json&page=${page}&prop=text&formatversion=2&origin=*`).then(response => response.json()).then(data => data);\r\n\r\n        return data;\r\n    }\r\n\r\n    function extractLink(href: any) {\r\n        if (!href.includes('/')) {\r\n            scrollToView(href);\r\n        } else {\r\n            let parts = href.split('/');\r\n            parts.splice(0, 2);\r\n            let pageLinks = parts.join().split('#');\r\n            if (pageLinks.length > 1) {\r\n                pageLinks.splice(1, 1);\r\n                parts = pageLinks;\r\n            }\r\n            parts.join();\r\n            return parts;\r\n        }\r\n    }\r\n\r\n    function parse(parserOutput: any) {\r\n        console.log(parserOutput);\r\n\r\n        let content = parserOutput.parse.text;\r\n\r\n        setWikipediaContent(content);\r\n\r\n        addToRoute({\r\n            pageid: parserOutput.parse.pageid,\r\n            title: parserOutput.parse.title,\r\n        });\r\n\r\n        scrollToTop();\r\n\r\n        if (goal && parserOutput.parse.title === goal.title) {\r\n            success();\r\n        }\r\n    }\r\n\r\n    function scrollToTop() {\r\n        window.scrollTo({\r\n            top: 0,\r\n        })\r\n    }\r\n\r\n    function addToRoute(routeEntry: RouteEntry) {\r\n        setRoute([...route, routeEntry])\r\n    }\r\n\r\n    function scrollToView(link: string) {\r\n        if (entryPoint && entryPoint.current) {\r\n            entryPoint.current.querySelector(`span${link}`)?.scrollIntoView();\r\n        }\r\n    }\r\n\r\n    function success() {\r\n        alert('Congratulations! You are done');\r\n        io.emit('finished', {\r\n            /* Timekeeping at the Server */\r\n            route,\r\n        });\r\n    }\r\n\r\n    if (training === true) {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"gameScreen\">\r\n            <div id=\"wikipediaEntry\" ref={entryPoint} dangerouslySetInnerHTML={{ __html: wikipediaContent }}></div>\r\n            <div className=\"sidebarWrapper\">\r\n                <div>\r\n                    <Lobby id={lobbyid} props={props} />\r\n                    <Timer />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Timer = () => {\r\n\r\n    const [time, setTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const Interval = setInterval(() => {\r\n            setTime(() => time + 1);\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(Interval);\r\n        }\r\n    })\r\n\r\n    return (\r\n        <h1>{time}</h1>\r\n    )\r\n}","C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\socket.tsx",[],"C:\\Users\\Armin\\Google Drive\\Coding\\nodeJS\\wikirace\\wikirace-react\\src\\components\\test.tsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":3,"column":42,"nodeType":"62","messageId":"63","endLine":3,"endColumn":46},{"ruleId":"60","severity":1,"message":"64","line":20,"column":11,"nodeType":"62","messageId":"63","endLine":20,"endColumn":13},{"ruleId":"60","severity":1,"message":"65","line":2,"column":16,"nodeType":"62","messageId":"63","endLine":2,"endColumn":21},{"ruleId":"60","severity":1,"message":"66","line":2,"column":23,"nodeType":"62","messageId":"63","endLine":2,"endColumn":29},{"ruleId":"60","severity":1,"message":"67","line":7,"column":6,"nodeType":"62","messageId":"63","endLine":7,"endColumn":15},{"ruleId":"60","severity":1,"message":"68","line":20,"column":13,"nodeType":"62","messageId":"63","endLine":20,"endColumn":20},{"ruleId":"69","severity":1,"message":"70","line":34,"column":8,"nodeType":"71","endLine":34,"endColumn":10,"suggestions":"72"},{"ruleId":"60","severity":1,"message":"73","line":15,"column":22,"nodeType":"62","messageId":"63","endLine":15,"endColumn":33},{"ruleId":"69","severity":1,"message":"74","line":36,"column":8,"nodeType":"71","endLine":36,"endColumn":10,"suggestions":"75"},{"ruleId":"60","severity":1,"message":"76","line":39,"column":18,"nodeType":"62","messageId":"63","endLine":39,"endColumn":25},{"ruleId":"69","severity":1,"message":"77","line":64,"column":8,"nodeType":"71","endLine":64,"endColumn":26,"suggestions":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'io' is assigned a value but never used.","'Route' is defined but never used.","'Router' is defined but never used.","'menuState' is defined but never used.","'lobbyID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'io', 'props.history', and 'setLobbyID'. Either include them or remove the dependency array.","ArrayExpression",["81"],"'setUsername' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'io', 'props.props.history', and 'username'. Either include them or remove the dependency array.",["82"],"'setGoal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'extractLink' and 'parse'. Either include them or remove the dependency array.",["83"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [io, props.history, setLobbyID]",{"range":"90","text":"91"},"Update the dependencies array to be: [id, io, props.props.history, username]",{"range":"92","text":"93"},"Update the dependencies array to be: [extractLink, parse, wikipediaContent]",{"range":"94","text":"95"},[981,983],"[io, props.history, setLobbyID]",[984,986],"[id, io, props.props.history, username]",[1799,1817],"[extractLink, parse, wikipediaContent]"]